name: Build & deploy FOOD BACKEND [ Development ]

on:
  push:
    branches: [ develop, ci/* ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_DEV }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE_DEV }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER_DEV }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION_DEV }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME_DEV }}

jobs:
  build-and-deploy-ecs:
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      id: checkout
      uses: actions/checkout@v4 
    
    - name: Configure AWS Credentials
      id: aws-configuration
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" == "refs/heads/ci"* ]]; then
          IMAGE_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        fi
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          IMAGE_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}-prod
        fi
        docker build -t ${IMAGE_URL} --platform linux/amd64 .
        docker push ${IMAGE_URL}
        echo "image=${IMAGE_URL}" >> $GITHUB_OUTPUT

    - name: Download task definition
      id: download-task-definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy-ecs
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 5 minutes
